name: BeatIt

on:
  workflow_dispatch: # lets you run a build from the UI
  push:
  pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp
  PROJECT_NAME: BeatIt

defaults:
  run:
    shell: bash

jobs:
  build_and_test:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-22.04
            pluginval-binary: ./pluginval
          - name: macOS
            os: macos-14
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
            extra-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          - name: Windows
            os: windows-latest
            pluginval-binary: ./pluginval.exe
          - name: FreeBSD
            os: ubuntu-latest
            pluginval-binary: ./pluginval
            use-freebsd: true

    steps:
      # === Setup environment ===
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          
      # Platform specific setup
      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Set up Clang
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-clang@v1

      - name: Install JUCE's Linux Deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev xvfb ninja-build
          sudo /usr/bin/Xvfb $DISPLAY &

      - name: Install macOS Deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install ninja osxutils

      - name: Use latest Xcode
        if: ${{ matrix.name == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # Windows IPP setup
      - name: Cache IPP
        if: runner.os == 'Windows'
        id: cache-ipp
        uses: actions/cache@v4
        with:
          key: ipp-v5
          path: C:\Program Files (x86)\Intel

      - name: Install IPP
        if: (runner.os == 'Windows') && (steps.cache-ipp.outputs.cache-hit != 'true')
        run: |
          curl --output oneapi.exe https://registrationcenter-download.intel.com/akdlm/IRC_NAS/b4adec02-353b-4144-aa21-f2087040f316/w_ipp_oneapi_p_2021.11.0.533_offline.exe
          ./oneapi.exe -s -x -f oneapi
          ./oneapi/bootstrapper.exe -s -c --action install --components=intel.oneapi.win.ipp.devel --eula=accept -p=NEED_VS2022_INTEGRATION=1 --log-dir=.

      - name: Save IPP cache
        if: runner.os == 'Windows' && (steps.cache-ipp.outputs.cache-hit != 'true')
        uses: actions/cache/save@v4
        with:
          path: C:\Program Files (x86)\Intel
          key: ipp-v5

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Cache the build
        uses: mozilla-actions/sccache-action@v0.0.6

      # Certificates setup for macOS (commented but preserved)
      # - name: Import Certificates
        # uses: apple-actions/import-codesign-certs@v3
        # if: ${{ matrix.name == 'macOS' }}
        # with:
          # p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
          # p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}

      # === Build ===
      - name: Configure
        if: ${{ matrix.name != 'FreeBSD' }}
        run: cmake -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ${{ matrix.extra-flags }} .

      - name: Build
        if: ${{ matrix.name != 'FreeBSD' }}
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

      # FreeBSD specific build
      - name: FreeBSD Build
        if: ${{ matrix.name == 'FreeBSD' }}
        uses: vmactions/freebsd-vm@v1
        with:
          envs: 'BUILD_TYPE BUILD_DIR PROJECT_NAME'
          usesh: true
          sync: rsync
          copyback: true
          prepare: |
            pkg update
            pkg install -y \
              cmake \
              ninja \
              pkgconf \
              alsa-lib \
              xorg-libraries \
              freetype2 \
              webkit2-gtk4 \
              mesa-libs \
              curl \
              gcc \
              sccache \
              zip \
              unzip \
              bash \
              rsync
          run: |
            pwd
            ls -la
            # S'assurer que nous sommes dans le bon répertoire
            if [ -d "BeatIt" ]; then
              cd BeatIt
            fi
            
            # Configuration
            cmake -B ${BUILD_DIR} -G Ninja -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
            
            # Build
            cmake --build $BUILD_DIR --config $BUILD_TYPE --parallel 4
            
            # Créer la structure des répertoires pour les artifacts
            mkdir -p $BUILD_DIR/${PROJECT_NAME}_artefacts/$BUILD_TYPE
            
            # Copier les artifacts dans la structure attendue
            for plugin_type in LV2 Standalone; do
              mkdir -p "$BUILD_DIR/${PROJECT_NAME}_artefacts/$BUILD_TYPE/$plugin_type"
              if [ -d "$BUILD_DIR/${plugin_type}" ]; then
                cp -r "$BUILD_DIR/${plugin_type}"/* "$BUILD_DIR/${PROJECT_NAME}_artefacts/$BUILD_TYPE/$plugin_type/"
              fi
            done
            
            # Créer l'archive ZIP
            cd "$BUILD_DIR/${PROJECT_NAME}_artefacts/$BUILD_TYPE"
            zip -r "${PROJECT_NAME}-${VERSION}-FreeBSD.zip" . -x "lib${PROJECT_NAME}_SharedCode.a"

      # === Tests (commented but preserved) ===
      # - name: Test
        # working-directory: ${{ env.BUILD_DIR }}
        # run: ./Tests

      # - name: Run Benchmarks
        # working-directory: ${{ env.BUILD_DIR }}
        # run: ./Benchmarks

      # === Environment setup ===
      - name: Read .env from CMake
        run: |
          cat .env
          cat .env >> $GITHUB_ENV

      - name: Set artifacts env vars
        run: |
          ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "VST3_PATH=$ARTIFACTS_PATH/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
          echo "AU_PATH=$ARTIFACTS_PATH/AU/${{ env.PRODUCT_NAME }}.component" >> $GITHUB_ENV
          echo "AUV3_PATH=$ARTIFACTS_PATH/AUv3/${{ env.PRODUCT_NAME }}.appex" >> $GITHUB_ENV
          echo "LV2_PATH=$ARTIFACTS_PATH/LV2/${{ env.PRODUCT_NAME }}.lv2" >> $GITHUB_ENV
          echo "STANDALONE_PATH=$ARTIFACTS_PATH/Standalone/${{ env.PRODUCT_NAME }}.app" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

      # === Testing ===
      - name: Pluginval
        if: ${{ matrix.name != 'FreeBSD' }}
        run: |
          curl -LO "https://github.com/Tracktion/pluginval/releases/download/v1.0.3/pluginval_${{ matrix.name }}.zip"
          7z x pluginval_${{ matrix.name }}.zip
          ${{ matrix.pluginval-binary }} --strictness-level 10 --verbose --validate "${{ env.VST3_PATH }}"

      # === Artifacts preparation ===
      - name: Prepare Unified Artifacts Directory
        run: |
          # Create a more organized structure for all platforms
          mkdir -p unified_artifacts/${{ matrix.name }}/{VST3,LV2,Standalone}
          if [ "${{ matrix.name }}" = "macOS" ]; then
            mkdir -p unified_artifacts/${{ matrix.name }}/AU
          fi

          # Copy artifacts based on platform
          case "${{ matrix.name }}" in
            "Windows")
              cp -r "${{ env.VST3_PATH }}" unified_artifacts/${{ matrix.name }}/VST3/
              cp -r "${{ env.LV2_PATH }}" unified_artifacts/${{ matrix.name }}/LV2/
              cp "${{ env.ARTIFACTS_PATH }}/Standalone/${{ env.PRODUCT_NAME }}.exe" unified_artifacts/${{ matrix.name }}/Standalone/
              ;;
            "macOS")
              cp -r "${{ env.VST3_PATH }}" unified_artifacts/${{ matrix.name }}/VST3/
              cp -r "${{ env.AU_PATH }}" unified_artifacts/${{ matrix.name }}/AU/
              cp -r "${{ env.LV2_PATH }}" unified_artifacts/${{ matrix.name }}/LV2/
              cp -r "${{ env.STANDALONE_PATH }}" unified_artifacts/${{ matrix.name }}/Standalone/
              ;;
            "Linux")
              cp -r "${{ env.VST3_PATH }}" unified_artifacts/${{ matrix.name }}/VST3/
              cp -r "${{ env.LV2_PATH }}" unified_artifacts/${{ matrix.name }}/LV2/
              cp "${{ env.ARTIFACTS_PATH }}/Standalone/${{ env.PRODUCT_NAME }}" unified_artifacts/${{ matrix.name }}/Standalone/
              ;;
            "FreeBSD")
              cp -r "${{ env.LV2_PATH }}" unified_artifacts/${{ matrix.name }}/LV2/
              cp "${{ env.ARTIFACTS_PATH }}/Standalone/${{ env.PRODUCT_NAME }}" unified_artifacts/${{ matrix.name }}/Standalone/
              ;;
          esac

      # === Platform specific packaging ===
      # macOS signing (commented but preserved)
      # - name: Codesign (macOS)
        # if: ${{ matrix.name == 'macOS' }}
        # run: |
          # codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.VST3_PATH }}" --deep --strict --options=runtime --timestamp
          # codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.AU_PATH }}" --deep --strict --options=runtime --timestamp
          # codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.STANDALONE_PATH }}" --deep --strict --options=runtime --timestamp
          # codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.LV2_PATH }}" --deep --strict --options=runtime --timestamp

      - name: Add Custom Icons (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          sips -i packaging/BeatIt.icns
          DeRez -only icns packaging/BeatIt.icns > /tmp/icons
          Rez -a /tmp/icons -o "${{ env.VST3_PATH }}/Icon"
          Rez -a /tmp/icons -o "${{ env.AU_PATH }}/Icon"
          Rez -a /tmp/icons -o "${{ env.LV2_PATH }}/Icon"
          SetFile -a C "${{ env.VST3_PATH }}"
          SetFile -a C "${{ env.AU_PATH }}"
          SetFile -a C "${{ env.LV2_PATH }}"

      - name: Create DMG and Zip (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          python3 -m pip install setuptools --break-system-packages
          npm install -g appdmg
          mkdir -p packaging/dmg
          sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/Components && sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/VST3
          ln -s /Library/Audio/Plug-Ins/Components "packaging/dmg/Your Mac's Component folder"
          ln -s /Library/Audio/Plug-Ins/VST3 "packaging/dmg/Your Mac's VST3 folder"
          cp -r "${{ env.VST3_PATH }}" packaging/dmg/
          cp -r "${{ env.AU_PATH }}" packaging/dmg/
          cp -r "${{ env.STANDALONE_PATH }}" packaging/dmg/
          cp -r "${{ env.LV2_PATH }}" packaging/dmg/

          # Create ZIP
          zip -r "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.zip" packaging/dmg/*

          cd packaging && appdmg dmg.json "${{ env.ARTIFACT_NAME}}.dmg"
          # codesign -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" --timestamp -i ${{ env.BUNDLE_ID }} --force "${{ env.ARTIFACT_NAME }}.dmg"
          # xcrun notarytool submit "${{ env.ARTIFACT_NAME }}.dmg" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
          # xcrun stapler staple "${{ env.ARTIFACT_NAME }}.dmg"

      - name: Create Archives
        run: |
          case "${{ matrix.name }}" in
            "Windows")
              7z a -tzip "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.zip" unified_artifacts/${{ matrix.name }}/*
              
              iscc "packaging\installer.iss"
              mv "packaging/Output/${{ env.ARTIFACT_NAME }}.exe" "${{ env.ARTIFACTS_PATH }}/"
              ;;
            "Linux"|"FreeBSD")
              cd "${{ env.ARTIFACTS_PATH }}"
              7z a -tzip "${{ env.ARTIFACT_NAME }}.zip" "-xr!lib${{ env.PRODUCT_NAME }}_SharedCode.a" .
              ;;
          esac

      # Windows signing (commented but preserved)
      # - name: Codesign with Azure Trusted Signing (Windows)
        # if: ${{ matrix.name == 'Windows' }}
        # uses: azure/trusted-signing-action@v0.5.0
        # with:
          # azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          # azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          # azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          # endpoint: ${{ secrets.AZURE_ENDPOINT }}
          # trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          # certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
          # files-folder: ${{ env.ARTIFACTS_PATH }}
          # files-folder-filter: exe

      # === Upload artifacts ===
      - name: Upload Exe (Windows)
        if: ${{ matrix.name == 'Windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.exe
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.exe"

      - name: Upload Zip (Windows)
        if: ${{ matrix.name == 'Windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.zip
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.zip"
          
      - name: Upload Zip (Linux)
        if: ${{ matrix.name == 'Linux' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.zip
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.zip"
          
      - name: Upload Zip (FreeBSD)
        if: ${{ matrix.name == 'FreeBSD' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.zip
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.zip"

      - name: Upload Zip (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.zip
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.zip"

      - name: Upload DMG (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.dmg
          path: packaging/${{ env.ARTIFACT_NAME }}.dmg

      # === Debug info ===
      - name: Debug Directory Structure
        run: |
          echo "Content of ${{ env.ARTIFACTS_PATH }}:"
          ls -R "${{ env.ARTIFACTS_PATH }}"
          echo "Content of unified_artifacts after copy:"
          ls -R unified_artifacts

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            */*.exe
            */*.zip
            */*.dmg
